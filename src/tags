!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMPLEX_NETWORK__CPP	ComplexNetwork.hpp	/^#define COMPLEX_NETWORK__CPP$/;"	kind:d	line:3	language:C++
ComplexNetwork	ComplexNetwork.hpp	/^        ComplexNetwork();$/;"	kind:p	line:23	language:C++	class:ComplexNetwork	access:public	signature:()
ComplexNetwork	ComplexNetwork.hpp	/^ComplexNetwork<NODE_TYPE,EDGE_TYPE>::ComplexNetwork(){$/;"	kind:f	line:31	language:C++	class:ComplexNetwork	signature:()
ComplexNetwork	ComplexNetwork.hpp	/^class ComplexNetwork{$/;"	kind:c	line:15	language:C++
ComplexNetwork::ComplexNetwork	ComplexNetwork.hpp	/^        ComplexNetwork();$/;"	kind:p	line:23	language:C++	class:ComplexNetwork	access:public	signature:()
ComplexNetwork::ComplexNetwork	ComplexNetwork.hpp	/^ComplexNetwork<NODE_TYPE,EDGE_TYPE>::ComplexNetwork(){$/;"	kind:f	line:31	language:C++	class:ComplexNetwork	signature:()
ComplexNetwork::addNode	ComplexNetwork.hpp	/^        void addNode(Node<NODE_TYPE, EDGE_TYPE> *);$/;"	kind:p	line:25	language:C++	class:ComplexNetwork	access:public	signature:(Node<NODE_TYPE, EDGE_TYPE> *)
ComplexNetwork::addNode	ComplexNetwork.hpp	/^void ComplexNetwork<NODE_TYPE,EDGE_TYPE>::addNode(Node<NODE_TYPE, EDGE_TYPE>* n){$/;"	kind:f	line:38	language:C++	class:ComplexNetwork	signature:(Node<NODE_TYPE, EDGE_TYPE>* n)
ComplexNetwork::edges	ComplexNetwork.hpp	/^        std::list<Edge<NODE_TYPE, EDGE_TYPE>* > edges;$/;"	kind:m	line:19	language:C++	class:ComplexNetwork	access:private
ComplexNetwork::nodes	ComplexNetwork.hpp	/^        std::list<Node<NODE_TYPE, EDGE_TYPE>* > nodes;$/;"	kind:m	line:18	language:C++	class:ComplexNetwork	access:private
ComplexNetwork::~ComplexNetwork	ComplexNetwork.hpp	/^        virtual ~ComplexNetwork();$/;"	kind:p	line:24	language:C++	class:ComplexNetwork	access:public	implementation:virtual	signature:()
ComplexNetwork::~ComplexNetwork	ComplexNetwork.hpp	/^ComplexNetwork<NODE_TYPE, EDGE_TYPE>::~ComplexNetwork(){$/;"	kind:f	line:44	language:C++	class:ComplexNetwork	signature:()
EDGE__H	Edge.hpp	/^#define EDGE__H$/;"	kind:d	line:3	language:C++
Edge	Edge.hpp	/^        Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to);$/;"	kind:p	line:26	language:C++	class:Edge	access:public	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to)
Edge	Edge.hpp	/^        Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute);$/;"	kind:p	line:27	language:C++	class:Edge	access:public	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute)
Edge	Edge.hpp	/^Edge<NODE_TYPE,EDGE_TYPE>::Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to){$/;"	kind:f	line:37	language:C++	class:Edge	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to)
Edge	Edge.hpp	/^Edge<NODE_TYPE,EDGE_TYPE>::Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute){$/;"	kind:f	line:49	language:C++	class:Edge	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute)
Edge	Edge.hpp	/^class Edge{$/;"	kind:c	line:17	language:C++
Edge::Edge	Edge.hpp	/^        Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to);$/;"	kind:p	line:26	language:C++	class:Edge	access:public	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to)
Edge::Edge	Edge.hpp	/^        Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute);$/;"	kind:p	line:27	language:C++	class:Edge	access:public	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute)
Edge::Edge	Edge.hpp	/^Edge<NODE_TYPE,EDGE_TYPE>::Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to){$/;"	kind:f	line:37	language:C++	class:Edge	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to)
Edge::Edge	Edge.hpp	/^Edge<NODE_TYPE,EDGE_TYPE>::Edge(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute){$/;"	kind:f	line:49	language:C++	class:Edge	signature:(Node<NODE_TYPE, EDGE_TYPE>* from, Node<NODE_TYPE, EDGE_TYPE>* to, EDGE_TYPE attribute)
Edge::attribute	Edge.hpp	/^        EDGE_TYPE attribute;$/;"	kind:m	line:21	language:C++	class:Edge	access:private
Edge::from	Edge.hpp	/^        Node<NODE_TYPE, EDGE_TYPE>* from;$/;"	kind:m	line:19	language:C++	class:Edge	access:private
Edge::getAttribute	Edge.hpp	/^        EDGE_TYPE getAttribute();$/;"	kind:p	line:24	language:C++	class:Edge	access:public	signature:()
Edge::getAttribute	Edge.hpp	/^EDGE_TYPE Edge<NODE_TYPE,EDGE_TYPE>::getAttribute(){$/;"	kind:f	line:57	language:C++	class:Edge	signature:()
Edge::setAttribute	Edge.hpp	/^        void setAttribute(EDGE_TYPE attr);$/;"	kind:p	line:25	language:C++	class:Edge	access:public	signature:(EDGE_TYPE attr)
Edge::setAttribute	Edge.hpp	/^void Edge<NODE_TYPE, EDGE_TYPE>::setAttribute(EDGE_TYPE attr){$/;"	kind:f	line:62	language:C++	class:Edge	signature:(EDGE_TYPE attr)
Edge::to	Edge.hpp	/^        Node<NODE_TYPE, EDGE_TYPE>* to;$/;"	kind:m	line:20	language:C++	class:Edge	access:private
NODE__H	Node.hpp	/^#define NODE__H$/;"	kind:d	line:4	language:C++
Node	Node.hpp	/^        Node(NODE_TYPE attribute);$/;"	kind:p	line:19	language:C++	class:Node	access:public	signature:(NODE_TYPE attribute)
Node	Node.hpp	/^Node<NODE_TYPE, EDGE_TYPE>::Node(NODE_TYPE attribute){$/;"	kind:f	line:25	language:C++	class:Node	signature:(NODE_TYPE attribute)
Node	Node.hpp	/^class Node{$/;"	kind:c	line:11	language:C++
Node::Node	Node.hpp	/^        Node(NODE_TYPE attribute);$/;"	kind:p	line:19	language:C++	class:Node	access:public	signature:(NODE_TYPE attribute)
Node::Node	Node.hpp	/^Node<NODE_TYPE, EDGE_TYPE>::Node(NODE_TYPE attribute){$/;"	kind:f	line:25	language:C++	class:Node	signature:(NODE_TYPE attribute)
Node::_id	Node.hpp	/^        int _id;$/;"	kind:m	line:13	language:C++	class:Node	access:private
Node::attribute	Node.hpp	/^        NODE_TYPE attribute;$/;"	kind:m	line:14	language:C++	class:Node	access:private
Node::edges	Node.hpp	/^        std::list<Edge<NODE_TYPE, EDGE_TYPE>* > edges;$/;"	kind:m	line:15	language:C++	class:Node	access:private
Node::getAttribute	Node.hpp	/^        NODE_TYPE getAttribute();$/;"	kind:p	line:17	language:C++	class:Node	access:public	signature:()
Node::getAttribute	Node.hpp	/^NODE_TYPE Node<NODE_TYPE, EDGE_TYPE>::getAttribute(){$/;"	kind:f	line:30	language:C++	class:Node	signature:()
Node::setAttribute	Node.hpp	/^        void setAttribute(NODE_TYPE attr);$/;"	kind:p	line:18	language:C++	class:Node	access:public	signature:(NODE_TYPE attr)
Node::setAttribute	Node.hpp	/^void Node<NODE_TYPE, EDGE_TYPE>::setAttribute(NODE_TYPE attr){$/;"	kind:f	line:35	language:C++	class:Node	signature:(NODE_TYPE attr)
_id	Node.hpp	/^        int _id;$/;"	kind:m	line:13	language:C++	class:Node	access:private
addNode	ComplexNetwork.hpp	/^        void addNode(Node<NODE_TYPE, EDGE_TYPE> *);$/;"	kind:p	line:25	language:C++	class:ComplexNetwork	access:public	signature:(Node<NODE_TYPE, EDGE_TYPE> *)
addNode	ComplexNetwork.hpp	/^void ComplexNetwork<NODE_TYPE,EDGE_TYPE>::addNode(Node<NODE_TYPE, EDGE_TYPE>* n){$/;"	kind:f	line:38	language:C++	class:ComplexNetwork	signature:(Node<NODE_TYPE, EDGE_TYPE>* n)
attribute	Edge.hpp	/^        EDGE_TYPE attribute;$/;"	kind:m	line:21	language:C++	class:Edge	access:private
attribute	Node.hpp	/^        NODE_TYPE attribute;$/;"	kind:m	line:14	language:C++	class:Node	access:private
edges	ComplexNetwork.hpp	/^        std::list<Edge<NODE_TYPE, EDGE_TYPE>* > edges;$/;"	kind:m	line:19	language:C++	class:ComplexNetwork	access:private
edges	Node.hpp	/^        std::list<Edge<NODE_TYPE, EDGE_TYPE>* > edges;$/;"	kind:m	line:15	language:C++	class:Node	access:private
from	Edge.hpp	/^        Node<NODE_TYPE, EDGE_TYPE>* from;$/;"	kind:m	line:19	language:C++	class:Edge	access:private
getAttribute	Edge.hpp	/^        EDGE_TYPE getAttribute();$/;"	kind:p	line:24	language:C++	class:Edge	access:public	signature:()
getAttribute	Edge.hpp	/^EDGE_TYPE Edge<NODE_TYPE,EDGE_TYPE>::getAttribute(){$/;"	kind:f	line:57	language:C++	class:Edge	signature:()
getAttribute	Node.hpp	/^        NODE_TYPE getAttribute();$/;"	kind:p	line:17	language:C++	class:Node	access:public	signature:()
getAttribute	Node.hpp	/^NODE_TYPE Node<NODE_TYPE, EDGE_TYPE>::getAttribute(){$/;"	kind:f	line:30	language:C++	class:Node	signature:()
main	main.cpp	/^int main(int argc, char **argv){$/;"	kind:f	line:6	language:C++	signature:(int argc, char **argv)
nodes	ComplexNetwork.hpp	/^        std::list<Node<NODE_TYPE, EDGE_TYPE>* > nodes;$/;"	kind:m	line:18	language:C++	class:ComplexNetwork	access:private
setAttribute	Edge.hpp	/^        void setAttribute(EDGE_TYPE attr);$/;"	kind:p	line:25	language:C++	class:Edge	access:public	signature:(EDGE_TYPE attr)
setAttribute	Edge.hpp	/^void Edge<NODE_TYPE, EDGE_TYPE>::setAttribute(EDGE_TYPE attr){$/;"	kind:f	line:62	language:C++	class:Edge	signature:(EDGE_TYPE attr)
setAttribute	Node.hpp	/^        void setAttribute(NODE_TYPE attr);$/;"	kind:p	line:18	language:C++	class:Node	access:public	signature:(NODE_TYPE attr)
setAttribute	Node.hpp	/^void Node<NODE_TYPE, EDGE_TYPE>::setAttribute(NODE_TYPE attr){$/;"	kind:f	line:35	language:C++	class:Node	signature:(NODE_TYPE attr)
to	Edge.hpp	/^        Node<NODE_TYPE, EDGE_TYPE>* to;$/;"	kind:m	line:20	language:C++	class:Edge	access:private
~ComplexNetwork	ComplexNetwork.hpp	/^        virtual ~ComplexNetwork();$/;"	kind:p	line:24	language:C++	class:ComplexNetwork	access:public	implementation:virtual	signature:()
~ComplexNetwork	ComplexNetwork.hpp	/^ComplexNetwork<NODE_TYPE, EDGE_TYPE>::~ComplexNetwork(){$/;"	kind:f	line:44	language:C++	class:ComplexNetwork	signature:()
